generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model migrations {
  id        Int    @id @default(autoincrement())
  timestamp BigInt
  name      String @db.VarChar(255)
}

model Person {
  id        Int       @id @default(autoincrement())
  name      String    @db.VarChar(255)
  photo     String?   @db.VarChar(255)
  birthAt   DateTime? @db.Date
  document  String?   @db.Char(11)
  phone     String?   @db.Char(11)
  user_id   Int
  createdAt DateTime  @default(now()) @db.DateTime(0)
  updatedAt DateTime  @default(now()) @db.DateTime(0)
  User      User      @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "FK_persons_users")
  addresses Address[] @relation("addressesTopersons")
  orders    Order[]   @relation("ordersTopersons")

  @@index([user_id], map: "FK_persons_users")
  @@map("persons")
}

model User {
  id               Int                @id @default(autoincrement())
  email            String             @unique(map: "UQ_97672ac88f789774dd47f7c8be3") @db.VarChar(255)
  password         String             @db.VarChar(255)
  createdAt        DateTime           @default(now()) @db.DateTime(0)
  updatedAt        DateTime           @default(now()) @db.DateTime(0)
  PasswordRecovery PasswordRecovery[] @relation("password_recoveriesTousers")
  Person           Person[]

  @@map("users")
}

model Address {
  id         Int      @id @default(autoincrement())
  street     String   @db.VarChar(255)
  number     String?  @db.VarChar(16)
  complement String?  @db.VarChar(255)
  district   String   @db.VarChar(255)
  city       String   @db.VarChar(255)
  state      String   @db.VarChar(255)
  country    String   @db.VarChar(255)
  zipcode    String   @db.Char(8)
  person_id  Int
  createdAt  DateTime @default(now()) @db.DateTime(0)
  updatedAt  DateTime @default(now()) @db.DateTime(0)
  persons    Person   @relation("addressesTopersons", fields: [person_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "FK_addresses_users")
  orders     Order[]  @relation("addressesToorders")

  @@index([person_id], map: "FK_addresses_users_idx")
  @@map("addresses")
}

model PasswordRecovery {
  id        Int       @id @default(autoincrement())
  token     String    @db.VarChar(255)
  user_id   Int
  resetAt   DateTime? @db.DateTime(0)
  createdAt DateTime  @default(now()) @db.DateTime(0)
  updatedAt DateTime  @default(now()) @db.DateTime(0)
  users     User      @relation("password_recoveriesTousers", fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "FK_password_recoveries_users")

  @@index([user_id], map: "FK_password_recoveries_users")
  @@map("password_recoveries")
}

model PaymentSituation {
  id        Int      @id @default(autoincrement())
  name      String   @db.VarChar(255)
  createdAt DateTime @default(now()) @db.DateTime(0)
  updatedAt DateTime @default(now()) @db.DateTime(0)
  orders    Order[]  @relation("ordersTopayment_situations")

  @@map("payment_situations")
}

model Product {
  id                 Int                 @id @default(autoincrement())
  name               String              @unique(map: "name_UNIQUE") @db.VarChar(255)
  description        String              @db.VarChar(255)
  price              Decimal             @db.Decimal(10, 2)
  createdAt          DateTime            @default(now()) @db.DateTime(0)
  updatedAt          DateTime            @default(now()) @db.DateTime(0)
  order_items        OrderItem[]         @relation("order_itemsToproducts")
  product_ingredient ProductIngredient[] @relation("product_ingredientToproducts")

  @@map("products")
}

model IngredientType {
  id          Int          @id @default(autoincrement())
  name        String       @db.VarChar(255)
  description String?      @db.VarChar(255)
  repeatable  Int          @default(1) @db.TinyInt
  createdAt   DateTime     @default(now()) @db.DateTime(0)
  updatedAt   DateTime     @default(now()) @db.DateTime(0)
  ingredients Ingredient[] @relation("ingredient_typesToingredients")

  @@map("ingredient_types")
}

model Ingredient {
  id                 Int                 @id @default(autoincrement())
  name               String              @db.VarChar(255)
  description        String?             @db.VarChar(255)
  price              Decimal             @db.Decimal(10, 2)
  ingredient_type_id Int                 
  createdAt          DateTime            @default(now()) @db.DateTime(0)
  updatedAt          DateTime            @default(now()) @db.DateTime(0)
  ingredient_types   IngredientType      @relation("ingredient_typesToingredients", fields: [ingredient_type_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "FK_ingredients_ingredient_types")
  product_ingredient ProductIngredient[] @relation("ingredientsToproduct_ingredient")

  @@index([ingredient_type_id], map: "FK_ingredients_ingredient_types_idx")
  @@map("ingredients")
}

model ProductIngredient {
  product_id    Int
  ingredient_id Int
  ingredients   Ingredient @relation("ingredientsToproduct_ingredient", fields: [ingredient_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "FK_ingredients_product_ingredient")
  products      Product    @relation("product_ingredientToproducts", fields: [product_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "FK_products_product_ingredient")

  @@id([product_id, ingredient_id])
  @@index([ingredient_id], map: "FK_ingredients_product_ingredient")
  @@map("product_ingredient")
}

model Order {
  id                   Int              @id @default(autoincrement())
  person_id            Int
  address_id           Int
  payment_situation_id Int
  total                Decimal          @db.Decimal(10, 2)
  observations         String?          @db.Text
  createdAt            DateTime         @default(now()) @db.DateTime(0)
  updatedAt            DateTime         @default(now()) @db.DateTime(0)
  addresses            Address          @relation("addressesToorders", fields: [address_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "FK_orders_addresses")
  payment_situations   PaymentSituation @relation("ordersTopayment_situations", fields: [payment_situation_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "FK_orders_payment_situations")
  persons              Person           @relation("ordersTopersons", fields: [person_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "FK_orders_persons")
  order_items          OrderItem[]      @relation("order_itemsToorders")

  @@index([address_id], map: "FK_orders_addresses")
  @@index([payment_situation_id], map: "FK_orders_payment_situations")
  @@index([person_id], map: "FK_orders_persons")
  @@map("orders")
}

model OrderItem {
  id           Int      @id @default(autoincrement())
  order_id     Int
  product_id   Int
  product_name String   @db.VarChar(255)
  price        Decimal  @db.Decimal(10, 2)
  quantity     Int      @default(1) @db.TinyInt
  createdAt    DateTime @default(now()) @db.DateTime(0)
  updatedAt    DateTime @default(now()) @db.DateTime(0)
  orders       Order    @relation("order_itemsToorders", fields: [order_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "FK_order_items_orders")
  products     Product  @relation("order_itemsToproducts", fields: [product_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "FK_order_items_products")

  @@index([order_id], map: "FK_order_items_orders")
  @@index([product_id], map: "FK_order_items_products")
  @@map("order_items")
}
